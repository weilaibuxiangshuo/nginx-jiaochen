1.【alias】

别名配置，用于访问文件系统，在匹配到location配置的URL路径后，指向【alias】配置的路径。如：

location /test/ 
{ 
alias /home/sftp/img/; 
}
即：请求/test/1.jpg（省略了协议与域名），将会返回文件/home/sftp/img/1.jpg。

2.【root】

根路径配置，用于访问文件系统，在匹配到location配置的URL路径后，指向【root】配置的路径，并把location配置路径附加到其后。如：

location /test/ 
{ 
root /home/sftp/img/; 
}
即：请求/test/1.jpg（省略了协议与域名），将会返回文件/home/sftp/img/test/1.jpg，相较于alias，使用root会把/test/附加到根目录之后。

3.【proxy_pass】

反向代理配置，用于代理请求，适用于前后端负载分离或多台机器、服务器负载分离的场景，在匹配到location配置的URL路径后，转发请求到【proxy_pass】配置的URL，是否会附加location配置路径与【proxy_pass】配置的路径后是否有"/"有关，有"/"则不附加，如：

location /test/ 
{ 
proxy_pass http://127.0.0.1:8080/; 
}
即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到http://127.0.0.1:8080/1.jpg（未附加/test/路径）。

location /test/ 
{ 
proxy_pass http://127.0.0.1:8080; 
}
即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到http://127.0.0.1:8080/test/1.jpg（附加/test/路径）。

location /test/ 
{ 
proxy_pass http://127.0.0.1:8080/img; 
}
即：请求/test/1.jpg（省略了协议与域名），将会被nginx转发请求到http://127.0.0.1:8080/img1.jpg（未附加/test/路径，但附加了/test/之后的路径）。

以下特殊 是proxy_pass http://127.0.0.1:8080/img;  带img目录的情况
location /test    #不能加“/”, 如果加了,那么这个proxy_pass http://127.0.0.1:8080/img也得加杠; 如：proxy_pass http://127.0.0.1:8080/img/;   如果没加会变成访问http://127.0.0.1:8080/img1.png
{ 
proxy_pass http://127.0.0.1:8080/img;    效果一样 
proxy_pass http://127.0.0.1:8080/img/;
}
 
location /test/aaaa 
{ 
proxy_pass http://127.0.0.1:8080/img;   效果一样,和y一开始说proxy_pass 末尾加不加“/” 行为不一样了
proxy_pass http://127.0.0.1:8080/img/; 
即：请求/test/1.jpg、/test/aaa/1.jpg（省略了协议与域名），将会被nginx转发请求到http://127.0.0.1:8080/img/1.jpg（未附加/test/和子目录路径）。

4.【location语法】
location [=|~|~*|^~]  /uri/  { … }

= 开头表示精确匹配  此时和location中的root没关系了。至于location外面的root才能影响= 的配置路径

^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。

~ 开头表示区分大小写的正则匹配

~* 开头表示不区分大小写的正则匹配

!~和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则

/ 通用匹配，任何请求都会匹配到。

1、精准匹配和一般匹配
location /zg/ 
  { 
    root html;
    index index.html;
  }
请求URL：http://192.168.60.106/zg/  访问时匹配的是：=/zg/

2、精准匹配和一般匹配，uri后面不带“/”匹配
location /zg
  { 
    root html;
    index index.html;
  }
请求URL：http://192.168.60.106/zg/  访问时匹配的是：/zg

3、精准匹配和一般匹配，uri前面和后面都不带“/”
location zg
  { 
    root html;
    index index.html;
  }
  location zg
  { 
    root html/yb;
    index index.html;
  }
请求URL：http://192.168.60.106/zg/ 访问时匹配的是：= zg

4、精准匹配和一般匹配，uri带"/"和不带"/"匹配
location zg
  { 
    root html;
    index index.html;
  }
 location /zg/
 { 
   root html;
   index index.html;
 }
 location zg
  { 
    root html/yb;
    index index.html;
  }
请求URL：http://192.168.60.106/zg/ 访问时匹配的是：/zg/ 顺序换也是一样
综上所述：路径相同时的精准匹配优先，必须是满足/uri/或者uri，要么uri两边都加/，要么uri两边都不加斜杆的情况

5、一般匹配时的匹配规则
 location /imges/
  { 
    root html/file;
    index index.html;
  }
 location /imges/aa
  { 
    root html/lfile;
    index index.html;
  }
在html下创建file,lfile文件夹，然后在file下创建images文件夹，在images下创建aa文件夹，在lfile下创建images文件夹，
接着在images下创建aa文件夹，然后同时在两个aa文件夹下导入test.jpg图片，这样file和lfile下都有images/aa路径
请求url：http://192.168.60.106/images/aa/test.jpg，既能匹配/images/,又能匹配/images/aa，这时以最长uri匹配优先，匹配的是：/images/aa

6、^~开头的非正则匹配和一般匹配
^~代表非正则匹配，非正则，不需要继续正则匹配。
 location ^~/imges/
  { 
    root html/file;
    index index.html;
  }
 location /imges/aa/
  { 
    root html/lfile;
    index index.html;
  }
 ^~:如果这个匹配使用^〜前缀，搜索停止。这个前缀官网和网上都说得很含糊，加上这个前缀，是会停止搜索正则匹配，但是对一般匹配是不会停止的，也就是说还是可以匹配到一般匹配的。
请求url： http://192.168.60.106/images/aa/test.jpg，匹配结果：/images/aa/

7、^~开头的非正则匹配和正则匹配
~ 开头表示区分大小写的正则匹配
 location ^~/imges/
  { 
    root html/file;
    index index.html;
  }
 location ~/imges/aa/
  { 
    root html/lfile;
    index index.html;
  }
 请求url： http://192.168.60.106/images/aa/test.jpg，匹配结果：^~/images/
 
 8、严格精准匹配和正则匹配
  location /
  { 
    root html;
    index index.html;
    deny all;
  }
 location ~\.html$
  { 
    allow all;
  }
严格精准匹配，如果被严格精准匹配到了，则不会继续搜索正则匹配
如果http://192.168.60.106,这个就严格精准匹配到了 /,则不会继续匹配 ~ \.html$
如果：http://192.168.60.106/index.html，则会被/ 匹配到，但是不是严格精准匹配，则会继续搜索正则匹配

9、正则匹配规则
都是正则uri的情况下，匹配是按照编辑顺序的
  location ~\.html$
  { 
    allow all;
  }
 location ~^/prefix/.*\.html$
  { 
    deny all;
  }
 请求URL：http://192.168.60.106/prefix/index.html，会优先匹配前面定义的location。
 
 10、@开头的uri
   error_page 404 = @fallback
   location @fallback
  { 
    proxy_pass http://www.baidu.com;
  }
 @开头的，如果请求的 URI 存在，则本 nginx 返回对应的页面；如果不存在，则把请求代理到baidu.com 上去做个弥补，其实就是做了一个容错，把找不到的url全部转发到fallback的反向代理服务器去。

最后总结：

1. 先判断精准命中，如果命中，立即返回结果并结束解析过程

2. 判断普通命中，如果有多个命中，记录下来最长的命中结果

3、如果是^~开头的命中，则不会继续搜索正则命中，但是会继续搜索一般命中

4. 继续判断正则表达式的解析结果，按配置里的正则表达式顺序为准，由上到下开始匹配，一旦匹配成功立刻返回结果，并结束解析过程。

延伸分析：a. 普通命中：顺序无所谓，是因为按命中长短来确定的   b. 正则命中：顺序有所谓，因为是从前往后命中的
